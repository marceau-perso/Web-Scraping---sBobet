package CONTROLLER;

/**
 * 
 * @author K.Misho
 * @date august '15
 * @version 1.0
 */

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.CheckBoxTableCell;
import javafx.scene.control.cell.ComboBoxTableCell;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import CONTROLLER.QueryTimerTask;
import MODEL.HttpURLConn;
import MODEL.League;
import MODEL.Match;
import MODEL.Product;
import MODEL.Robot;
import MODEL.Scrap;
import javafx.application.Application;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn.CellEditEvent;
import javafx.scene.control.TablePosition;
import javafx.scene.control.TableView;
import javafx.scene.control.TableView.TableViewSelectionModel;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.converter.DefaultStringConverter;
import VIEW.View_History;

public class History_Controller {
	private WebDriver 						driver 			= null;
	private	Robot 							robot 			= null;
	private	QueryTimerTask 					task			= null;
	private	java.util.Timer 				timer			= null;
	private HashMap<String,Vector<Match>>   historyMatches  = null;
	// UI elements for the new product
	
	@FXML
	private ComboBox 						cDate			= null;
	
	@FXML
	private TableView<Match> 				tableHistory	= null;
	
	
	private ObservableList<Match> 			data 			= FXCollections.observableArrayList();
	private ObservableList<String>			dataDate		= FXCollections.observableArrayList();
	@FXML
	private TableColumn<Match,String> 		hDate			= null;
	@FXML
	private TableColumn<Match,String>		hMatch			= null;
	@FXML
	private TableColumn<Match, String> 		hIssue			= null;
	@FXML
	private TableColumn<Match, String>		hOdd_Start		= null;
	@FXML
	private TableColumn<Match,String> 		hOdd_Max		= null;
	@FXML
	private TableColumn<Match, String> 		hOdd_Final		= null;
	//
	
	public History_Controller(){
		historyMatches = new HashMap<String,Vector<Match>>();
	}

	public void initialize(){
		cDate.valueProperty().addListener((obs,oldVal,newVal)->{
			data.clear();
				Vector<Match> matches = null;
				matches = historyMatches.get(newVal);
			
            for(Match m : matches){
            	data.add(m);
  			}
		});
		//
	
		hDate.setCellValueFactory(
                new PropertyValueFactory<Match, String>("Date"));
		hMatch.setCellValueFactory(new PropertyValueFactory<Match, String>("Match"));
		
		hIssue.setCellValueFactory(
                new PropertyValueFactory<Match, String>("Issue"));
		hOdd_Start.setCellValueFactory(
              new PropertyValueFactory<Match, String>("Odd_Start"));
		hOdd_Max.setCellValueFactory(
	              new PropertyValueFactory<Match, String>("Odd_Max"));
		hOdd_Final.setCellValueFactory(
	              new PropertyValueFactory<Match, String>("Odd_Final"));
		

		tableHistory.setItems(data);
		tableHistory.setEditable(true);
		tableHistory.getSelectionModel().selectedItemProperty().addListener(new ChangeListener() {
		    @Override
		    public void changed(ObservableValue observableValue, Object oldValue, Object newValue) {
		        //Check whether item is selected and set value of selected item to Label
		        if(tableHistory.getSelectionModel().getSelectedItem() != null) 
		        {    
		           TableViewSelectionModel selectionModel = tableHistory.getSelectionModel();
		           ObservableList selectedCells = selectionModel.getSelectedCells();
		           TablePosition tablePosition = (TablePosition) selectedCells.get(0);
		           int selectedRow = tablePosition.getRow();
		           System.out.println("Selected Value" + selectedRow);
		         }
		         }
		     });
	
		fillMatches();
	}
	
	public void fillMatches(){
			load();
	}
	
	public void load(){
		try{
			  data.clear();
			  //Create object of FileReader
	          FileReader inputFile = new FileReader("History.txt");

	          //Instantiate the BufferedReader Class
	          BufferedReader bufferReader = new BufferedReader(inputFile);

	          //Variable to hold the one line data
	          String line;

	          // Read file line by line and print on the console
	          //if ((line = bufferReader.readLine()) == null) return;
	          int i=0;
	          String pyet = null;
	          while ((line = bufferReader.readLine()) != null)   {
	        	 
	        	  System.err.print(line.split(";")[0]);
	        	  System.err.print(line.split(";")[1]);
	        	  System.err.print(line.split(";")[2]);
	        	  System.err.println(line.split(";")[3]);
	        	  System.err.println(line.split(";")[4]);
	        	  System.err.println(line.split(";")[5]);
	        	  Match m = new Match(line.split(";")[0],line.split(";")[1],line.split(";")[2].split("-")[0],line.split(";")[2].split("-")[1],"");
	        	  m.setIssue(line.split(";")[3]);
	        	  m.setOddsHistory(line.split(";")[4], line.split(";")[5], line.split(";")[6]);
	        	  data.add(m);
	        	  if(historyMatches.containsKey(m.getDate()) == true)
	        		  historyMatches.get(m.getDate()).add(m);
	        	  else{
	        		  Vector<Match> vector = new Vector<Match>();
	        		  vector.add(m);
	        		  cDate.getItems().add(m.getDate());
	        		  historyMatches.put(m.getDate(), vector);
	        	  }
	        	  i++;
	          }
	          //Close the buffer reader
	          bufferReader.close();
	       }catch(Exception e){
	          System.out.println("Error while reading file line by line:" + e.getMessage());                      
	         
	       }
}
	
}
