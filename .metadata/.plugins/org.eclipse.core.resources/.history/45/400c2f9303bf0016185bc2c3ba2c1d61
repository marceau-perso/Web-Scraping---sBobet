package MODEL;

/**
 * 
 * @author K.Misho
 * @date august '15
 * @version 1.0
 */

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.text.ParseException;
import java.util.Vector;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import MODEL.League;
import MODEL.LeagueManager;
import MODEL.Match;
import MODEL.MatchManager;
import MODEL.Market;
import MODEL.MarketManager;
import MODEL.Bet;
import MODEL.BetManager;


public class Robot {
		
	private Spider webScrapper = null;
	public Vector<WebDriver> browsers = null;
	private String site = "https://www.sbobet.com/euro/football";
	private  LeagueManager leagueManager = new LeagueManager();
	private  MatchManager matchManager = new MatchManager();
	private BetManager betManager = new BetManager();
	private MarketManager marketManager = new MarketManager();

	
	public Robot(){
		browsers = new Vector<WebDriver>();
	}
	
	public void loadSite(String src) throws InterruptedException, FileNotFoundException, UnsupportedEncodingException{
		try {
			webScrapper = new Spider(src,this);
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		//open the site
		Thread.sleep(2000);
		webScrapper.loadSite();
		/*
		//login
		webScrapper.initUser("Qfasf", "213$Df");
		Thread.sleep(7000);
		webScrapper.login();
		Thread.sleep(2000);
		
		//tmp confirm !! to be removed
		while(webScrapper.getDriver().findElements(By.className("DWHomeBtn")).size()==0){}
		*/
		// GET LEAGUES
		

		/*try{
			el.click();
		}catch(NoSuchElementException e){
			System.err.println("Deposit button not present");
			return;
		}*/
		
		Thread.sleep(3000);
		//System.err.println(webScrapper.getDriver().getCurrentUrl());
		//System.err.println("Element " + el.getAttribute("value"));
		
        //System.err.println(webScrapper.getDriver().getPageSource());
		webScrapper.getDriver().navigate().refresh();

		//while(webScrapper.getDriver().findElements(By.id("bu:sm:markets")).size()==0){}
		
		//webScrapper.getDriver().findElement(By.id("bu:sm:markets")).click();
		
	}
	
	public Vector<League> searchLeagues() throws InterruptedException, FileNotFoundException, UnsupportedEncodingException
	{
		try {
			webScrapper = new Spider("",this);
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		//open the site
		Thread.sleep(2000);
		webScrapper.loadSite();
		
		List<WebElement> WEleagues = webScrapper.getDriver().findElements(By.xpath("//*[@id='ms-all-tos-1-3']/ul/li[*]"));
		
		ArrayList<String> names = new ArrayList<String>();
		ArrayList<String> links = new ArrayList<String>();
		int i = 0;
		for(WebElement we : WEleagues) {
			List<WebElement> childs = we.findElements(By.xpath(".//a"));
			names.add(we.getText());
			for(WebElement we2 : childs)
			{
				links.add(we2.getAttribute("href"));
			}
			leagueManager.addLeague(names.get(i), links.get(i));
			i++;
		}
		Vector<League> listLeagues = leagueManager.getLeagues();
		System.out.println("liste des leagues trouvées : "+leagueManager.printLeagues());
		return listLeagues;
	}
	
	public Vector<Market> searchOutrights(League league){
		// on efface tous les précédents bets inscrit dans notre modele
		betManager.removeBets();
		marketManager.removeMarkets();
		
		//on doit cliquer avant de lancer le scraping de la page
		WebElement link = webScrapper.getDriver().findElement(By.xpath("//*[contains(text(),'"+league.toString()+"')]"));
		System.out.println(link.getText());
		link.click();
		
		//on charge les markets de outrights
		int i=0;
		List<WebElement> WEbets3 = webScrapper.getDriver().findElements(By.xpath("//div[@class='NonLiveMarket']/div[*]/div[@class='MarketHd']/div[@class='SubHead']"));
		List<WebElement> WEMarket = webScrapper.getDriver().findElements(By.xpath("//*[@class='MarketT Open']"));
		for (WebElement we : WEbets3){
			System.out.println("Test 1 : "+WEMarket.get(i).getAttribute("id"));
			marketManager.addMarket(we.getText(),WEMarket.get(i).getAttribute("id"));
			
			i++;
		}
		System.out.println("Outrights : "+marketManager.printMarkets());
		return marketManager.getMarkets();
	}
	
	public Vector<Bet> searchOutrightsBets(Market market){
		betManager.removeBets();
		List<WebElement> WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr"));
		String[] results = null;;
		ArrayList<String> odds = new ArrayList<String>();
		ArrayList<String> content = new ArrayList<String>();
		for(WebElement we : WEBet){
			results = we.getText().split(System.getProperty("line.separator"));
			System.out.println("taille de mon result :"+results.length);
			int i=0;
			while(i<results.length){
				if(i%2==0)
				{
					content.add(results[i]);
				}else
				{
					odds.add(results[i]);
				}
				i++;
			}

		}
		int k = 0;
		Match outright = null;
		while(k<(odds.size())){
			betManager.addBet(outright, market.getMarket(), odds.get(k), content.get(k));
			k++;
		}
		System.out.println(betManager.printBets());
		return betManager.getBets();
	}
	
	public Vector<Match> searchMatches(League league) {

		matchManager.removeMatches();

		//on doit cliquer avant de lancer le scraping de la page 
		WebElement link = webScrapper.getDriver().findElement(By.xpath("//*[contains(text(),'"+league.toString()+"')]"));
		System.out.println(link.getText());
		link.click();
		
		// ensuite on charge les données pour ce championnat
		String[] matches;
		WebElement WEmatches1X2Test = webScrapper.getDriver().findElement(By.xpath("//*[@class='NonLiveMarket']"));
		matches = WEmatches1X2Test.getText().split(System.getProperty("line.separator"));
		System.out.println("liste des matches scrapés : "+matches);
		int i = 0;
		int j = 0;
		ArrayList<String> away = new ArrayList<String>();
		ArrayList<String> home = new ArrayList<String>();
		ArrayList<String> oddsA = new ArrayList<String>();
		ArrayList<String> draw = new ArrayList<String>();
		ArrayList<String> oddsD = new ArrayList<String>();
		ArrayList<String> oddsH = new ArrayList<String>();
		ArrayList<String> date = new ArrayList<String>();
		ArrayList<String> market = new ArrayList<String>();
		
		String marketString=matches[0];

		while((i+j)<matches.length)
		{
			if(matches[i+j].equals("1X2"))
			{
				marketString=matches[i+j];
				j++;
				continue;
			}
			
			if(matches[i+j].equals("First Half 1X2"))
			{
				marketString=matches[i+j];
				j++;
				continue;
			}

			switch(i%9){
				case 0: date.add("date :"+matches[i+j]) ;
				market.add(marketString);
					break;
				case 1: break;
				case 2: oddsH.add(matches[i+j]);
					break;
				case 3: home.add(matches[i+j]);
					break;
				case 4: oddsD.add(matches[i+j]);
					break;
				case 5: draw.add(matches[i+j]);
					break;
				case 6: oddsA.add(matches[i+j]);
					break;
				case 7 : away.add(matches[i+j]);
					break;
				case 8 : break;
			}
			i++;
		}

		i=0;
		while(i<(home.size()))
		{
			if(home.get(i)!=null )
			{
				matchManager.addMatch(home.get(i) +"-"+ away.get(i)+"-"+market.get(i), date.get(i), home.get(i), away.get(i), league.toString(), oddsH.get(i), oddsA.get(i),market.get(i),draw.get(i),oddsD.get(i));
			}
			i++;
		}
		Vector<Match> listMatches = matchManager.getMatches();
		return listMatches;
	}
	
	public Vector<Market> searchMarkets(Match match,int index){
		// crawler pour recuperer le lien des endroits ou sont les markets
		List<WebElement> WEbets = webScrapper.getDriver().findElements(By.xpath("//*[@class='IconMarkets']"));
		if(WEbets.size()==0){
			System.out.println("retour en arriere !");
			JavascriptExecutor js = (JavascriptExecutor) webScrapper.getDriver();
			js.executeScript("window.history.go(-1)");
			
		}
		List<WebElement> WEbets0 = webScrapper.getDriver().findElements(By.xpath("//*[@class='IconMarkets']"));
		WEbets0.get(index).click();
			
	
		System.out.println("remove markets : "+marketManager.removeMarkets());
		
		// crawler pour recuperer les bets en eux meme
		//page chargée il suffit de recuperer 
		//List<WebElement> WEbets2 = webScrapper.getDriver().findElements(By.xpath("//*[@class='MarketT Open']"));
		int i=0;
		List<WebElement> WEbets3 = webScrapper.getDriver().findElements(By.xpath("//div[@class='NonLiveMarket']/div[*]/div[@class='MarketHd']/div[@class='SubHead']"));
		List<WebElement> WEMarket = webScrapper.getDriver().findElements(By.xpath("//*[@class='MarketT Open']"));
		for (WebElement we : WEbets3){
			System.out.println("Test 1 : "+WEMarket.get(i).getAttribute("id"));
			marketManager.addMarket(we.getText(),WEMarket.get(i).getAttribute("id"));
			
			i++;
		}

		Vector<Market> listMarkets = marketManager.getMarkets();
		return listMarkets;
		
	}
	
	public Vector<Bet> searchBets(Market market,Match currentMatch){
		betManager.removeBets();
		if(market.getMarket().equals("1X2") || market.getMarket().equals("First Half 1X2") || market.getMarket().equals("Odd Even") || market.getMarket().equals("Total Goal") || market.getMarket().equals("Double Chance"))
		{
			List<WebElement> WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]"));
			List<WebElement> odds = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsR']"));
			List<WebElement> content = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsL']"));
			int i = 0;
			while (i < WEBet.size()) {

				//We need to find a solution to solve the problem. In which elements we have 2 pieces of information
				// first one is the odds
				// second one is the content
				betManager.addBet(currentMatch, market.getMarket(),odds.get(i).getText(),content.get(i).getText());
				i++;
			}
		}
		else if(market.getMarket().equals("Asian Handicap") || market.getMarket().equals("First Half Asian Handicap") || market.getMarket().equals("Over Under") || market.getMarket().equals("First Half Over Under") ){
			List<WebElement> WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]"));
			List<WebElement> odds = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsR']"));
			List<WebElement> content = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsL']"));
			List<WebElement> detail = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsM']"));
			int i = 0;
			while (i < WEBet.size()) {
				betManager.addBet(currentMatch, market.getMarket(),odds.get(i).getText(),content.get(i).getText(),detail.get(i).getText());
				i++;
			}
		}
		else if(market.getMarket().equals("Correct Score") || market.getMarket().equals("First Half Correct Score")){
			List<WebElement> WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]"));
			List<WebElement> content = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/thead/tr/td"));
			List<WebElement> odds = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a[*]/span[@class='oddsR']"));
			List<WebElement> detail = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr/td[*]/a[*]/span[@class='oddsM']"));
			String[] results = null;
			ArrayList<String> resultOdds = new ArrayList<String>();
			ArrayList<String> resultDetail = new ArrayList<String>();
			ArrayList<String> resultContent = new ArrayList<String>();
			int i = 0;
			int k = 0;
			int h = 0;
			while (i < WEBet.size()) {
				results = WEBet.get(i).getText().split(System.getProperty("line.separator"));
				int j = 0;
				while(j<results.length){
					if(j%2==0){
						resultOdds.add(results[j]);
					}else{
						resultDetail.add(results[j]);
						resultContent.add(content.get(i).getText());
						h++;
					}
					j++;
				}
				i++;

			}
			while(k<h){
				betManager.addBet(currentMatch, market.getMarket(),resultOdds.get(k),resultContent.get(k),resultDetail.get(k));
				k++;
			}
		}
		else if (market.getMarket().equals("First Goal Last Goal") || market.getMarket().equals("Half Time Full Time")){
			int h = 0;
			String[] results = null;
			ArrayList<String> resultOdds = new ArrayList<String>();
			ArrayList<String> resultDetail = new ArrayList<String>();
			ArrayList<String> resultContent = new ArrayList<String>();
			List<WebElement> content = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/thead/tr/td"));
			List<WebElement> WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='"+market.getId()+"']/div[@class='MarketBd']/table/tbody/tr[*]"));
			for(WebElement we : WEBet){
				results = we.getText().split(System.getProperty("line.separator"));
				int i = 0;
				int j  = 0;
				while(i<results.length){
					System.out.println(results[i]);
					if(i%2==0){
						resultOdds.add(results[i]);
					}else{
						resultDetail.add(results[i]);
						resultContent.add(content.get(j).getText());
						j++;
						h++;

					}
					
					i++;
				}
				
			}
			int k=0;
			while(k<h){
				betManager.addBet(currentMatch, market.getMarket(),resultOdds.get(k),resultContent.get(k),resultDetail.get(k));
				k++;
			}
			
		}
		else if(market.getMarket().equals("Specials")){
			
		}
		
		
		Vector<Bet> listBets = betManager.getBets();
		System.out.println("print des bets : "+betManager.printBets());
		return listBets;
	}
	
	public Vector<Bet> searchBets2(Vector<Match> listMatches){
		List<WebElement> WEBet;
		List<WebElement> odds;
		List<WebElement> content;
		List<WebElement> detail;
		int index  =1;
		for(Match currentMatch : listMatches){
			List<WebElement> WEbets0 = webScrapper.getDriver().findElements(By.xpath("//*[@class='IconMarkets']"));
			WEbets0.get(index).click();
			WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='1X2']/div[@class='MarketBd']/table/tbody/tr/td[*]"));
			odds = webScrapper.getDriver().findElements(By.xpath("//div[@id='1X2']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsR']"));
			content = webScrapper.getDriver().findElements(By.xpath("//div[@id='1X2']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsL']"));
			int i = 0;
			while (i < WEBet.size()) {

				//We need to find a solution to solve the problem. In which elements we have 2 pieces of information
				// first one is the odds
				// second one is the content
				betManager.addBet(currentMatch, "1X2",odds.get(i).getText(),content.get(i).getText());
				i++;
			}
		
			WEBet = webScrapper.getDriver().findElements(By.xpath("//div[@id='Over Under']/div[@class='MarketBd']/table/tbody/tr/td[*]"));
			odds = webScrapper.getDriver().findElements(By.xpath("//div[@id='Over Under']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsR']"));
			content = webScrapper.getDriver().findElements(By.xpath("//div[@id='Over Under']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsL']"));
			detail = webScrapper.getDriver().findElements(By.xpath("//div[@id='Over Under']/div[@class='MarketBd']/table/tbody/tr/td[*]/a/span[@class='OddsM']"));
			i = 0;
			while (i < WEBet.size()) {
				betManager.addBet(currentMatch, "Over Under",odds.get(i).getText(),content.get(i).getText(),detail.get(i).getText());
				i++;
			}
			
			System.out.println("retour en arriere !");
			JavascriptExecutor js = (JavascriptExecutor) webScrapper.getDriver();
			js.executeScript("window.history.go(-1)");
		}
		

		Vector<Bet> listBets = betManager.getBets();
		System.out.println("print des bets : "+betManager.printBets());
		return listBets;
	}
	public SboBet_Match searchMatch(Match match) throws InterruptedException{
		SboBet_Match found_match = null;
		System.err.println("Search : " + match.getHome());
		try {
			 found_match =   webScrapper.searchToday(match);
			
			 if(found_match == null)found_match =  webScrapper.searchEarlyMarket(match);
			
	       } catch (ParseException e) {
			// TODO Auto-generated catch block
	       		e.printStackTrace();
	       }
		 if(found_match != null) found_match.setIssue(match.getIssue());
		 return found_match;
	}
	
	public void killBrowsers(){
		for(WebDriver web : browsers)
			web.close();
	}
	
	public void addBrowser(WebDriver web){
		browsers.addElement(web);
	}
}
